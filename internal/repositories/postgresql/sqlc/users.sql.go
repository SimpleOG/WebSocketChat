// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username,
                   password,
                   email,
                   date_of_birth)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, date_of_birth, password, created_at
`

type CreateUserParams struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	Email       pgtype.Text `json:"email"`
	DateOfBirth string      `json:"date_of_birth"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.DateOfBirth,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DateOfBirth,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
SELECT id, username, email, date_of_birth, password, created_at
FROM users
WHERE username = $1 or email=$2
`

type GetUserByUsernameOrEmailParams struct {
	Username string      `json:"username"`
	Email    pgtype.Text `json:"email"`
}

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, arg GetUserByUsernameOrEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameOrEmail, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DateOfBirth,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT id, username, email, date_of_birth, password, created_at
FROM users
WHERE (username = $1 or email = $2)
  and password = $3
`

type GetUserForLoginParams struct {
	Username string      `json:"username"`
	Email    pgtype.Text `json:"email"`
	Password string      `json:"password"`
}

func (q *Queries) GetUserForLogin(ctx context.Context, arg GetUserForLoginParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserForLogin, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DateOfBirth,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersById = `-- name: GetUsersById :one
SELECT id, username, email, date_of_birth, password, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUsersById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUsersById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DateOfBirth,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersWithLessDate = `-- name: GetUsersWithLessDate :many
SELECT id, username, email, date_of_birth, password, created_at
FROM users
WHERE date_of_birth < $1
`

func (q *Queries) GetUsersWithLessDate(ctx context.Context, dateOfBirth string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersWithLessDate, dateOfBirth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.DateOfBirth,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
