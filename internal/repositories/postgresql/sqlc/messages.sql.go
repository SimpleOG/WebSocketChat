// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (room_id, sender_id, content)
VALUES ($1, $2, $3)
`

type CreateMessageParams struct {
	RoomID   string `json:"room_id"`
	SenderID int32  `json:"sender_id"`
	Content  string `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage, arg.RoomID, arg.SenderID, arg.Content)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE message_id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, messageID int32) error {
	_, err := q.db.Exec(ctx, deleteMessage, messageID)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT message_id, room_id, sender_id, content, created_at FROM messages
WHERE message_id = $1
`

func (q *Queries) GetMessage(ctx context.Context, messageID int32) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, messageID)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.RoomID,
		&i.SenderID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageWithStatus = `-- name: GetMessageWithStatus :one
SELECT
    m.message_id, m.room_id, m.sender_id, m.content, m.created_at,
    ms.is_read,
    ms.read_at
FROM messages m
         LEFT JOIN messages_statuses ms ON
            m.message_id = ms.message_id AND
            ms.user_id = $2
WHERE m.message_id = $1
`

type GetMessageWithStatusParams struct {
	MessageID int32 `json:"message_id"`
	UserID    int32 `json:"user_id"`
}

type GetMessageWithStatusRow struct {
	MessageID int32            `json:"message_id"`
	RoomID    string           `json:"room_id"`
	SenderID  int32            `json:"sender_id"`
	Content   string           `json:"content"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	IsRead    pgtype.Bool      `json:"is_read"`
	ReadAt    pgtype.Timestamp `json:"read_at"`
}

func (q *Queries) GetMessageWithStatus(ctx context.Context, arg GetMessageWithStatusParams) (GetMessageWithStatusRow, error) {
	row := q.db.QueryRow(ctx, getMessageWithStatus, arg.MessageID, arg.UserID)
	var i GetMessageWithStatusRow
	err := row.Scan(
		&i.MessageID,
		&i.RoomID,
		&i.SenderID,
		&i.Content,
		&i.CreatedAt,
		&i.IsRead,
		&i.ReadAt,
	)
	return i, err
}

const listRoomMessages = `-- name: ListRoomMessages :many
SELECT message_id, room_id, sender_id, content, created_at FROM messages
WHERE room_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListRoomMessagesParams struct {
	RoomID string `json:"room_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListRoomMessages(ctx context.Context, arg ListRoomMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, listRoomMessages, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.RoomID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomMessagesWithStatus = `-- name: ListRoomMessagesWithStatus :many
SELECT
    m.message_id, m.room_id, m.sender_id, m.content, m.created_at,
    ms.is_read,
    ms.read_at
FROM messages m
         LEFT JOIN messages_statuses ms ON
            m.message_id = ms.message_id AND
            ms.user_id = $2
WHERE m.room_id = $1
ORDER BY m.created_at DESC
LIMIT $3 OFFSET $4
`

type ListRoomMessagesWithStatusParams struct {
	RoomID string `json:"room_id"`
	UserID int32  `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListRoomMessagesWithStatusRow struct {
	MessageID int32            `json:"message_id"`
	RoomID    string           `json:"room_id"`
	SenderID  int32            `json:"sender_id"`
	Content   string           `json:"content"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	IsRead    pgtype.Bool      `json:"is_read"`
	ReadAt    pgtype.Timestamp `json:"read_at"`
}

func (q *Queries) ListRoomMessagesWithStatus(ctx context.Context, arg ListRoomMessagesWithStatusParams) ([]ListRoomMessagesWithStatusRow, error) {
	rows, err := q.db.Query(ctx, listRoomMessagesWithStatus,
		arg.RoomID,
		arg.UserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRoomMessagesWithStatusRow{}
	for rows.Next() {
		var i ListRoomMessagesWithStatusRow
		if err := rows.Scan(
			&i.MessageID,
			&i.RoomID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
			&i.IsRead,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
