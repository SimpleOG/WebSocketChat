// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages_statuses.sql

package db

import (
	"context"
)

const countUnreadMessages = `-- name: CountUnreadMessages :one
SELECT COUNT(*) FROM messages_statuses
WHERE user_id = $1 AND is_read = FALSE
`

func (q *Queries) CountUnreadMessages(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUnreadMessages, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessageStatus = `-- name: CreateMessageStatus :one
INSERT INTO messages_statuses (message_id, user_id)
VALUES ($1, $2)
RETURNING message_id, user_id, is_read, read_at
`

type CreateMessageStatusParams struct {
	MessageID int32 `json:"message_id"`
	UserID    int32 `json:"user_id"`
}

func (q *Queries) CreateMessageStatus(ctx context.Context, arg CreateMessageStatusParams) (MessagesStatus, error) {
	row := q.db.QueryRow(ctx, createMessageStatus, arg.MessageID, arg.UserID)
	var i MessagesStatus
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.IsRead,
		&i.ReadAt,
	)
	return i, err
}

const getMessageStatus = `-- name: GetMessageStatus :one
SELECT message_id, user_id, is_read, read_at FROM messages_statuses
WHERE message_id = $1 AND user_id = $2
`

type GetMessageStatusParams struct {
	MessageID int32 `json:"message_id"`
	UserID    int32 `json:"user_id"`
}

func (q *Queries) GetMessageStatus(ctx context.Context, arg GetMessageStatusParams) (MessagesStatus, error) {
	row := q.db.QueryRow(ctx, getMessageStatus, arg.MessageID, arg.UserID)
	var i MessagesStatus
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.IsRead,
		&i.ReadAt,
	)
	return i, err
}

const listUnreadMessages = `-- name: ListUnreadMessages :many
SELECT m.message_id, m.room_id, m.sender_id, m.content, m.created_at FROM messages m
                    JOIN messages_statuses ms ON m.message_id = ms.message_id
WHERE ms.user_id = $1 AND ms.is_read = FALSE
ORDER BY m.created_at DESC
`

func (q *Queries) ListUnreadMessages(ctx context.Context, userID int32) ([]Message, error) {
	rows, err := q.db.Query(ctx, listUnreadMessages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.RoomID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :one
UPDATE messages_statuses
SET
    is_read = $3,
    read_at = CASE WHEN $3 = TRUE THEN now() ELSE NULL END
WHERE message_id = $1 AND user_id = $2
RETURNING message_id, user_id, is_read, read_at
`

type UpdateMessageStatusParams struct {
	MessageID int32 `json:"message_id"`
	UserID    int32 `json:"user_id"`
	IsRead    bool  `json:"is_read"`
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) (MessagesStatus, error) {
	row := q.db.QueryRow(ctx, updateMessageStatus, arg.MessageID, arg.UserID, arg.IsRead)
	var i MessagesStatus
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.IsRead,
		&i.ReadAt,
	)
	return i, err
}
